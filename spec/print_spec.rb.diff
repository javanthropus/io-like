<<< spec/print_spec.rb
>>> rubyspec/core/io/print_spec.rb
1c1
< describe "IO::Like#print" do
---
> describe IO, "#print" do
4,16c4,7
#lwoggardner: retained
<   it "returns nil" do
#lwoggardner: n/a we can't deal with $_ anyway. 
<   #it "writes $_ by default" do
#lwoggardner: covered by "calls obj.to_s..." below
<   it "coerces arguments to strings using to_s" do
#lwoggardner: retained
<   it "writes nil arguments as \"nil\"" do
#lwoggardner: covered by "multiple objects" below
<   it "appends $\\ to the output" do
#lwoggardner: retained, renamed for clarity
<   it "does not append $\\ to the output when it is nil" do
#lwoggardner: retained
<   it "writes $, between arguments" do
#lwoggardner: retained, renamed for clarity
<   it "does not write $, between arguments when it is nil" do
#lwoggardner: implicitly covered by shared/write, if you make the reasonable
#  assumption that print is just reformatting arguments to send to #write
<   it "does not check if the file is writable if writing zero bytes" do
#lwoggardner: implicitly covered by shared/write
<   it "checks if the file is writable if writing more than zero bytes" do
<     lambda do
#lwoggardner: implicitly covered by our retained shared/write 
<   it "does not raise IOError on closed stream if writing zero bytes" do
#lwoggardner: covered by "raises IOError on closed stream" below
<   it "raises IOError on closed stream if writing more than zero bytes" do
---
>   it "writes $_.to_s followed by $\\ (if any) to the stream if no arguments given" do
>   it "calls obj.to_s and not obj.to_str then writes the record separator" do
>   it "writes each obj.to_s to the stream and appends $\\ (if any) given multiple objects" do
>   it "raises IOError on closed stream" do
